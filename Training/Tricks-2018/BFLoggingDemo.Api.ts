/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class LogClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    setLogLevel(request: SetLogLevelRequest | null): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Log/SetLogLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetLogLevel(_response);
        });
    }

    protected processSetLogLevel(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class SampleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    willSucceed(): Promise<WillSucceedResponse | null> {
        let url_ = this.baseUrl + "/api/Sample/WillSucceed";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWillSucceed(_response);
        });
    }

    protected processWillSucceed(response: Response): Promise<WillSucceedResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? WillSucceedResponse.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WillSucceedResponse | null>(<any>null);
    }

    willFail(): Promise<WillFailResponse | null> {
        let url_ = this.baseUrl + "/api/Sample/WillFail";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWillFail(_response);
        });
    }

    protected processWillFail(response: Response): Promise<WillFailResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? WillFailResponse.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WillFailResponse | null>(<any>null);
    }

    maybeSucceedOrFail(): Promise<DatabaseCallResponse | null> {
        let url_ = this.baseUrl + "/api/Sample/MaybeSucceedOrFail";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMaybeSucceedOrFail(_response);
        });
    }

    protected processMaybeSucceedOrFail(response: Response): Promise<DatabaseCallResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DatabaseCallResponse.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DatabaseCallResponse | null>(<any>null);
    }
}

export class SetLogLevelRequest implements ISetLogLevelRequest {
    minimumLevel!: number;

    constructor(data?: ISetLogLevelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.minimumLevel = data["MinimumLevel"];
        }
    }

    static fromJS(data: any): SetLogLevelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SetLogLevelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MinimumLevel"] = this.minimumLevel;
        return data; 
    }
}

export interface ISetLogLevelRequest {
    minimumLevel: number;
}

export class WillSucceedResponse implements IWillSucceedResponse {
    timeOfOperation!: Date;

    constructor(data?: IWillSucceedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timeOfOperation = data["TimeOfOperation"] ? new Date(data["TimeOfOperation"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): WillSucceedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WillSucceedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TimeOfOperation"] = this.timeOfOperation ? this.timeOfOperation.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IWillSucceedResponse {
    timeOfOperation: Date;
}

export class WillFailResponse implements IWillFailResponse {
    timeOfOperation!: Date;

    constructor(data?: IWillFailResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timeOfOperation = data["TimeOfOperation"] ? new Date(data["TimeOfOperation"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): WillFailResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WillFailResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TimeOfOperation"] = this.timeOfOperation ? this.timeOfOperation.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IWillFailResponse {
    timeOfOperation: Date;
}

export class DatabaseCallResponse implements IDatabaseCallResponse {
    posts?: BlogPost[] | undefined;
    timeOfOperation!: Date;

    constructor(data?: IDatabaseCallResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Posts"] && data["Posts"].constructor === Array) {
                this.posts = [];
                for (let item of data["Posts"])
                    this.posts.push(BlogPost.fromJS(item));
            }
            this.timeOfOperation = data["TimeOfOperation"] ? new Date(data["TimeOfOperation"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DatabaseCallResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DatabaseCallResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.posts && this.posts.constructor === Array) {
            data["Posts"] = [];
            for (let item of this.posts)
                data["Posts"].push(item.toJSON());
        }
        data["TimeOfOperation"] = this.timeOfOperation ? this.timeOfOperation.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDatabaseCallResponse {
    posts?: BlogPost[] | undefined;
    timeOfOperation: Date;
}

export class BlogPost implements IBlogPost {
    blogId!: number;
    title?: string | undefined;

    constructor(data?: IBlogPost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.blogId = data["BlogId"];
            this.title = data["Title"];
        }
    }

    static fromJS(data: any): BlogPost {
        data = typeof data === 'object' ? data : {};
        let result = new BlogPost();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BlogId"] = this.blogId;
        data["Title"] = this.title;
        return data; 
    }
}

export interface IBlogPost {
    blogId: number;
    title?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}
