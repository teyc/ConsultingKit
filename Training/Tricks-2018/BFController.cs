//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Temp
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface ILogController
    {
        System.Threading.Tasks.Task<FileResponse> SetLogLevelAsync(SetLogLevelRequest request);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LogController : System.Web.Http.ApiController
    {
        private ILogController _implementation;
    
        public LogController(ILogController implementation)
        {
            _implementation = implementation;
        }
    
        [System.Web.Http.HttpPost, System.Web.Http.Route("api/Log/SetLogLevel")]
        public System.Threading.Tasks.Task<FileResponse> SetLogLevel([System.Web.Http.FromBody] SetLogLevelRequest request)
        {
            return _implementation.SetLogLevelAsync(request);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface ISampleController
    {
        System.Threading.Tasks.Task<WillSucceedResponse> WillSucceedAsync();
    
        System.Threading.Tasks.Task<WillFailResponse> WillFailAsync();
    
        System.Threading.Tasks.Task<DatabaseCallResponse> MaybeSucceedOrFailAsync();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.0.0 (NJsonSchema v9.12.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SampleController : System.Web.Http.ApiController
    {
        private ISampleController _implementation;
    
        public SampleController(ISampleController implementation)
        {
            _implementation = implementation;
        }
    
        [System.Web.Http.HttpGet, System.Web.Http.Route("api/Sample/WillSucceed")]
        public System.Threading.Tasks.Task<WillSucceedResponse> WillSucceed()
        {
            return _implementation.WillSucceedAsync();
        }
    
        [System.Web.Http.HttpGet, System.Web.Http.Route("api/Sample/WillFail")]
        public System.Threading.Tasks.Task<WillFailResponse> WillFail()
        {
            return _implementation.WillFailAsync();
        }
    
        [System.Web.Http.HttpGet, System.Web.Http.Route("api/Sample/MaybeSucceedOrFail")]
        public System.Threading.Tasks.Task<DatabaseCallResponse> MaybeSucceedOrFail()
        {
            return _implementation.MaybeSucceedOrFailAsync();
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetLogLevelRequest 
    {
        [Newtonsoft.Json.JsonProperty("MinimumLevel", Required = Newtonsoft.Json.Required.Always)]
        public int MinimumLevel { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SetLogLevelRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetLogLevelRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WillSucceedResponse 
    {
        [Newtonsoft.Json.JsonProperty("TimeOfOperation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeOfOperation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WillSucceedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WillSucceedResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WillFailResponse 
    {
        [Newtonsoft.Json.JsonProperty("TimeOfOperation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeOfOperation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WillFailResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WillFailResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DatabaseCallResponse 
    {
        [Newtonsoft.Json.JsonProperty("Posts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BlogPost> Posts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeOfOperation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeOfOperation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DatabaseCallResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DatabaseCallResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.12.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BlogPost 
    {
        [Newtonsoft.Json.JsonProperty("BlogId", Required = Newtonsoft.Json.Required.Always)]
        public int BlogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BlogPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlogPost>(data);
        }
    
    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

}
